#!/usr/bin/env bash

set -e

VERSION="1.0.0"
CONFIG_FILE="$HOME/.config/gh-ext-manage/config.json"

# Ë®ÄË™ûË®≠ÂÆö„ÅÆÊ§úÂá∫
detect_language() {
    local lang="${LANG:-${LC_ALL:-en_US.UTF-8}}"
    case "$lang" in
        ja_JP*|ja-JP*|ja*) echo "ja" ;;
        *) echo "en" ;;
    esac
}

LANGUAGE=$(detect_language)

# „Ç´„É©„ÉºË®≠ÂÆö
if [[ -t 1 ]] && command -v tput >/dev/null 2>&1; then
    RED=$(tput setaf 1)
    GREEN=$(tput setaf 2)
    YELLOW=$(tput setaf 3)
    BLUE=$(tput setaf 4)
    CYAN=$(tput setaf 6)
    BOLD=$(tput bold)
    RESET=$(tput sgr0)
else
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    CYAN=""
    BOLD=""
    RESET=""
fi

# Â§öË®ÄË™û„É°„ÉÉ„Çª„Éº„Ç∏
get_message() {
    local key="$1"
    case "$LANGUAGE" in
        "ja")
            case "$key" in
                "missing_deps") echo "‚ùå ÂøÖË¶Å„Å™‰æùÂ≠òÈñ¢‰øÇ„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô:" ;;
                "missing_deps_footer") echo "‰æùÂ≠òÈñ¢‰øÇ„Çí„Ç§„É≥„Çπ„Éà„Éº„É´„Åó„Å¶„Åã„ÇâÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ" ;;
                "installed_extensions") echo "üì¶ „Ç§„É≥„Çπ„Éà„Éº„É´Ê∏à„ÅøGitHub CLIÊã°Âºµ" ;;
                "no_extensions_installed") echo "‚ö†Ô∏è  „Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„ÇãÊã°Âºµ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì" ;;
                "repository") echo "üìç „É™„Éù„Ç∏„Éà„É™:" ;;
                "commit") echo "üÜî „Ç≥„Éü„ÉÉ„Éà:" ;;
                "installing_extensions") echo "üì• Êã°Âºµ„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´„ÇíÈñãÂßã„Åó„Åæ„Åô" ;;
                "no_extensions_in_config") echo "‚ö†Ô∏è  Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„Å´Êã°Âºµ„ÅåÂÆöÁæ©„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì" ;;
                "config_file") echo "Ë®≠ÂÆö„Éï„Ç°„Ç§„É´:" ;;
                "repo_not_specified") echo "‚ùå „É™„Éù„Ç∏„Éà„É™„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÊã°Âºµ„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åó„Åü" ;;
                "already_installed") echo "‚è≠Ô∏è  %s „ÅØÊó¢„Å´„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„Åæ„Åô" ;;
                "installing") echo "üì¶ %s „Çí„Ç§„É≥„Çπ„Éà„Éº„É´‰∏≠..." ;;
                "install_success") echo "‚úÖ %s „ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü" ;;
                "install_failed") echo "‚ùå %s „ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´„Å´Â§±Êïó„Åó„Åæ„Åó„Åü" ;;
                "install_summary") echo "„Ç§„É≥„Çπ„Éà„Éº„É´ÂÆå‰∫Ü: %dÂÄã„ÅÆÊã°Âºµ„Çí„Ç§„É≥„Çπ„Éà„Éº„É´, %dÂÄã„Çí„Çπ„Ç≠„ÉÉ„Éó" ;;
                "syncing_extensions") echo "üîÑ „Ç§„É≥„Çπ„Éà„Éº„É´Ê∏à„ÅøÊã°Âºµ„ÇíË®≠ÂÆö„Éï„Ç°„Ç§„É´„Å´ÂêåÊúü„Åó„Åæ„Åô" ;;
                "no_extensions_to_sync") echo "‚ö†Ô∏è  ÂêåÊúü„Åô„ÇãÊã°Âºµ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì" ;;
                "sync_success") echo "‚úÖ %dÂÄã„ÅÆÊã°Âºµ„ÇíË®≠ÂÆö„Éï„Ç°„Ç§„É´„Å´ÂêåÊúü„Åó„Åæ„Åó„Åü" ;;
                "updating_extension") echo "‚¨ÜÔ∏è  Êã°Âºµ '%s' „ÇíÊõ¥Êñ∞„Åó„Åæ„Åô" ;;
                "update_success") echo "‚úÖ %s „ÅÆÊõ¥Êñ∞„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü" ;;
                "update_failed") echo "‚ùå %s „ÅÆÊõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü" ;;
                "updating_all") echo "‚¨ÜÔ∏è  ÂÖ®„Å¶„ÅÆÊã°Âºµ„ÇíÊõ¥Êñ∞„Åó„Åæ„Åô" ;;
                "update_all_success") echo "‚úÖ ÂÖ®„Å¶„ÅÆÊã°Âºµ„ÅÆÊõ¥Êñ∞„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü" ;;
                "update_all_failed") echo "‚ùå Êã°Âºµ„ÅÆÊõ¥Êñ∞‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü" ;;
                "no_command") echo "‚ùå „Ç≥„Éû„É≥„Éâ„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì" ;;
                "unknown_command") echo "‚ùå ‰∏çÊòé„Å™„Ç≥„Éû„É≥„Éâ: %s" ;;
                *) echo "$key" ;;
            esac
            ;;
        *)
            case "$key" in
                "missing_deps") echo "‚ùå Missing required dependencies:" ;;
                "missing_deps_footer") echo "Please install the dependencies and try again." ;;
                "installed_extensions") echo "üì¶ Installed GitHub CLI Extensions" ;;
                "no_extensions_installed") echo "‚ö†Ô∏è  No extensions are installed" ;;
                "repository") echo "üìç Repository:" ;;
                "commit") echo "üÜî Commit:" ;;
                "installing_extensions") echo "üì• Starting extension installation" ;;
                "no_extensions_in_config") echo "‚ö†Ô∏è  No extensions defined in configuration file" ;;
                "config_file") echo "Configuration file:" ;;
                "repo_not_specified") echo "‚ùå Skipped extension with no repository specified" ;;
                "already_installed") echo "‚è≠Ô∏è  %s is already installed" ;;
                "installing") echo "üì¶ Installing %s..." ;;
                "install_success") echo "‚úÖ Successfully installed %s" ;;
                "install_failed") echo "‚ùå Failed to install %s" ;;
                "install_summary") echo "Installation complete: %d extensions installed, %d skipped" ;;
                "syncing_extensions") echo "üîÑ Syncing installed extensions to configuration file" ;;
                "no_extensions_to_sync") echo "‚ö†Ô∏è  No extensions to sync" ;;
                "sync_success") echo "‚úÖ Synced %d extensions to configuration file" ;;
                "updating_extension") echo "‚¨ÜÔ∏è  Updating extension '%s'" ;;
                "update_success") echo "‚úÖ Successfully updated %s" ;;
                "update_failed") echo "‚ùå Failed to update %s" ;;
                "updating_all") echo "‚¨ÜÔ∏è  Updating all extensions" ;;
                "update_all_success") echo "‚úÖ Successfully updated all extensions" ;;
                "update_all_failed") echo "‚ùå Error occurred while updating extensions" ;;
                "no_command") echo "‚ùå No command specified" ;;
                "unknown_command") echo "‚ùå Unknown command: %s" ;;
                *) echo "$key" ;;
            esac
            ;;
    esac
}

# ‰æùÂ≠òÈñ¢‰øÇ„ÉÅ„Çß„ÉÉ„ÇØ
check_dependencies() {
    local missing_deps=()
    
    if ! command -v gh >/dev/null 2>&1; then
        missing_deps+=("gh (GitHub CLI)")
    fi
    
    if ! command -v jq >/dev/null 2>&1; then
        missing_deps+=("jq")
    fi
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        echo "${RED}$(get_message "missing_deps")${RESET}"
        for dep in "${missing_deps[@]}"; do
            echo "  - $dep"
        done
        echo ""
        get_message "missing_deps_footer"
        exit 1
    fi
}

# Ë®≠ÂÆö„Éá„Ç£„É¨„ÇØ„Éà„É™„Å®„Éï„Ç°„Ç§„É´„ÅÆÂàùÊúüÂåñ
init_config() {
    local config_dir
    config_dir=$(dirname "$CONFIG_FILE")
    
    if [[ ! -d "$config_dir" ]]; then
        mkdir -p "$config_dir"
    fi
    
    if [[ ! -f "$CONFIG_FILE" ]]; then
        cat > "$CONFIG_FILE" << 'EOF'
{
  "extensions": []
}
EOF
    fi
}

# „Ç§„É≥„Çπ„Éà„Éº„É´Ê∏à„ÅøÊã°Âºµ„ÅÆ‰∏ÄË¶ßË°®Á§∫
cmd_list() {
    echo "${BLUE}$(get_message "installed_extensions")${RESET}"
    echo ""
    
    local extensions
    extensions=$(gh extension list 2>/dev/null || true)
    
    if [[ -z "$extensions" ]]; then
        echo "${YELLOW}$(get_message "no_extensions_installed")${RESET}"
        return 0
    fi
    
    echo "$extensions" | while IFS=$'\t' read -r name repo commit; do
        if [[ -n "$name" ]]; then
            echo "${GREEN}${BOLD}$name${RESET}"
            echo "  $(get_message "repository") $repo"
            echo "  $(get_message "commit") $commit"
            echo ""
        fi
    done
}

# Êã°Âºµ„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´
cmd_install() {
    init_config
    
    echo "${BLUE}$(get_message "installing_extensions")${RESET}"
    echo ""
    
    local extensions
    extensions=$(jq -r '.extensions[]' "$CONFIG_FILE" 2>/dev/null || echo "")
    
    if [[ -z "$extensions" ]]; then
        echo "${YELLOW}$(get_message "no_extensions_in_config")${RESET}"
        echo "$(get_message "config_file") $CONFIG_FILE"
        return 0
    fi
    
    local installed_count=0
    local skipped_count=0
    local temp_file="/tmp/gh-ext-manage-counts.$$"
    echo "0 0" > "$temp_file"
    
    echo "$extensions" | jq -r '. | @json' | while read -r ext_json; do
        local repo
        
        repo=$(echo "$ext_json" | jq -r '.repo // empty')
        
        if [[ -z "$repo" ]]; then
            echo "${RED}$(get_message "repo_not_specified")${RESET}"
            continue
        fi
        
        local ext_name
        ext_name=$(basename "$repo" | sed 's/^gh-//')
        
        # Êó¢„Å´„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
        if gh extension list | grep -q "$ext_name"; then
            printf "%s\n" "${YELLOW}$(get_message "already_installed" | sed "s/%s/$ext_name/g")${RESET}"
            read -r installed_count skipped_count < "$temp_file"
            echo "$installed_count $((skipped_count + 1))" > "$temp_file"
            continue
        fi
        
        printf "%s\n" "${CYAN}$(get_message "installing" | sed "s/%s/$repo/g")${RESET}"
        
        if gh extension install "$repo"; then
            printf "%s\n" "${GREEN}$(get_message "install_success" | sed "s/%s/$ext_name/g")${RESET}"
            read -r installed_count skipped_count < "$temp_file"
            echo "$((installed_count + 1)) $skipped_count" > "$temp_file"
        else
            printf "%s\n" "${RED}$(get_message "install_failed" | sed "s/%s/$ext_name/g")${RESET}"
        fi
        echo ""
    done
    
    read -r installed_count skipped_count < "$temp_file"
    rm -f "$temp_file"
    
    printf "%s\n" "${GREEN}${BOLD}$(get_message "install_summary" | sed "s/%s/$installed_count/" | sed "s/%s/$skipped_count/")${RESET}"
}

# ÊâãÂãï„Ç§„É≥„Çπ„Éà„Éº„É´Êã°Âºµ„ÅÆË®≠ÂÆö„Éï„Ç°„Ç§„É´ÂêåÊúü
cmd_sync() {
    init_config
    
    echo "${BLUE}$(get_message "syncing_extensions")${RESET}"
    echo ""
    
    local extensions
    extensions=$(gh extension list 2>/dev/null || true)
    
    if [[ -z "$extensions" ]]; then
        echo "${YELLOW}$(get_message "no_extensions_to_sync")${RESET}"
        return 0
    fi
    
    local repos=()
    while IFS=$'\t' read -r name repo commit; do
        if [[ -n "$name" && -n "$repo" ]]; then
            repos+=("$repo")
        fi
    done <<< "$extensions"
    
    local config_json='{"extensions":['
    local first=true
    
    for repo in "${repos[@]}"; do
        if [[ "$first" == "true" ]]; then
            first=false
        else
            config_json+=','
        fi
        config_json+="{\"repo\":\"$repo\"}"
    done
    config_json+=']}'
    
    echo "$config_json" | jq '.' > "$CONFIG_FILE"
    
    printf "%s\n" "${GREEN}$(get_message "sync_success" | sed "s/%s/${#repos[@]}/g")${RESET}"
    echo "$(get_message "config_file") $CONFIG_FILE"
}

# Êã°Âºµ„ÅÆÊõ¥Êñ∞
cmd_update() {
    local target_extension="$1"
    
    if [[ -n "$target_extension" ]]; then
        printf "%s\n" "${BLUE}$(get_message "updating_extension" | sed "s/%s/$target_extension/g")${RESET}"
        echo ""
        
        if gh extension upgrade "$target_extension"; then
            printf "%s\n" "${GREEN}$(get_message "update_success" | sed "s/%s/$target_extension/g")${RESET}"
        else
            printf "%s\n" "${RED}$(get_message "update_failed" | sed "s/%s/$target_extension/g")${RESET}"
            exit 1
        fi
    else
        echo "${BLUE}$(get_message "updating_all")${RESET}"
        echo ""
        
        if gh extension upgrade --all; then
            echo "${GREEN}$(get_message "update_all_success")${RESET}"
        else
            echo "${RED}$(get_message "update_all_failed")${RESET}"
            exit 1
        fi
    fi
}

# „Éò„É´„Éó„ÅÆË°®Á§∫
cmd_help() {
    if [[ "$LANGUAGE" == "ja" ]]; then
        cat << EOF
${BOLD}GitHub CLI Extension Manager${RESET} - GitHub CLIÊã°Âºµ„ÇíÁ∞°Âçò„Å´ÁÆ°ÁêÜ

${BOLD}‰ΩøÁî®ÊñπÊ≥ï:${RESET}
  gh ext-manage <„Ç≥„Éû„É≥„Éâ> [„Ç™„Éó„Ç∑„Éß„É≥]

${BOLD}„Ç≥„Éû„É≥„Éâ:${RESET}
  ${GREEN}list${RESET}              „Ç§„É≥„Çπ„Éà„Éº„É´Ê∏à„ÅøÊã°Âºµ„ÅÆ‰∏ÄË¶ßË°®Á§∫
  ${GREEN}install${RESET}           Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„Åã„ÇâÊã°Âºµ„Çí‰∏ÄÊã¨„Ç§„É≥„Çπ„Éà„Éº„É´
  ${GREEN}sync${RESET}              ÊâãÂãï„Ç§„É≥„Çπ„Éà„Éº„É´Êã°Âºµ„ÇíË®≠ÂÆö„Éï„Ç°„Ç§„É´„Å´ÂêåÊúü
  ${GREEN}update${RESET} [Êã°ÂºµÂêç]    Êã°Âºµ„ÅÆÊõ¥Êñ∞ÔºàÊã°ÂºµÂêçÁúÅÁï•ÊôÇ„ÅØÂÖ®„Å¶Êõ¥Êñ∞Ôºâ
  ${GREEN}help${RESET}              „Åì„ÅÆ„Éò„É´„Éó„ÇíË°®Á§∫
  ${GREEN}version${RESET}           „Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„ÇíË°®Á§∫

${BOLD}Ë®≠ÂÆö„Éï„Ç°„Ç§„É´:${RESET}
  $CONFIG_FILE

${BOLD}Ë®≠ÂÆö‰æã:${RESET}
  {
    "extensions": [
      {"repo": "cli/gh-copilot"},
      {"repo": "github/gh-actions"},
      {"repo": "dlvhdr/gh-dash", "alias": "dashboard"}
    ]
  }

${BOLD}‰æùÂ≠òÈñ¢‰øÇ:${RESET}
  - GitHub CLI (gh)
  - jq

GitHub: https://github.com/sh05/gh-ext-manage
EOF
    else
        cat << EOF
${BOLD}GitHub CLI Extension Manager${RESET} - Declarative management of GitHub CLI extensions

${BOLD}Usage:${RESET}
  gh ext-manage <command> [options]

${BOLD}Commands:${RESET}
  ${GREEN}list${RESET}              List installed extensions
  ${GREEN}install${RESET}           Install extensions from configuration file
  ${GREEN}sync${RESET}              Sync manually installed extensions to config
  ${GREEN}update${RESET} [name]     Update extensions (all if name omitted)
  ${GREEN}help${RESET}              Show this help
  ${GREEN}version${RESET}           Show version information

${BOLD}Configuration File:${RESET}
  $CONFIG_FILE

${BOLD}Example Configuration:${RESET}
  {
    "extensions": [
      {"repo": "cli/gh-copilot"},
      {"repo": "github/gh-actions"},
      {"repo": "dlvhdr/gh-dash", "alias": "dashboard"}
    ]
  }

${BOLD}Dependencies:${RESET}
  - GitHub CLI (gh)
  - jq

GitHub: https://github.com/sh05/gh-ext-manage
EOF
    fi
}

# „Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„ÅÆË°®Á§∫
cmd_version() {
    echo "${BOLD}gh-ext-manage${RESET} version $VERSION"
    echo ""
    echo "GitHub CLI Extension Manager"
    echo "Copyright (c) 2024"
    echo "MIT License"
}

# „É°„Ç§„É≥Âá¶ÁêÜ
main() {
    check_dependencies
    
    case "${1:-}" in
        "list")
            cmd_list
            ;;
        "install")
            cmd_install
            ;;
        "sync")
            cmd_sync
            ;;
        "update")
            cmd_update "$2"
            ;;
        "help"|"--help"|"-h")
            cmd_help
            ;;
        "version"|"--version"|"-v")
            cmd_version
            ;;
        "")
            echo "${RED}$(get_message "no_command")${RESET}"
            echo ""
            cmd_help
            exit 1
            ;;
        *)
            printf "%s\n" "${RED}$(get_message "unknown_command" | sed "s/%s/$1/g")${RESET}"
            echo ""
            cmd_help
            exit 1
            ;;
    esac
}

main "$@"